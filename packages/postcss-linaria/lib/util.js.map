{"version":3,"file":"util.js","names":["getLine","sourceAsString","indexAfterExpression","begginningOfLineIndex","lastIndexOf","endOfLineIndex","indexOf","Infinity","indexAfterExpressionInLine","line","substring","isSelector","isSingleLineRule","length","isProperty","isRuleSet","possibleRuleset","hasCurlyBraceAfterExpression","hasCommmaAfterExpression","indexOfOpenParenthesis","indexOfClosedParenthesis","hasFuncInExpression","hasColonOutsideOfExpression","includes","placeholderText","createPlaceholder","i"],"sources":["../src/util.ts"],"sourcesContent":["const getLine = (sourceAsString: string, indexAfterExpression: number) => {\n  const begginningOfLineIndex =\n    sourceAsString.lastIndexOf('\\n', indexAfterExpression) || 0;\n  const endOfLineIndex =\n    sourceAsString.indexOf('\\n', indexAfterExpression - 1) || Infinity;\n  const indexAfterExpressionInLine =\n    indexAfterExpression - begginningOfLineIndex;\n  return {\n    line: sourceAsString.substring(begginningOfLineIndex, endOfLineIndex + 1),\n    indexAfterExpressionInLine,\n  };\n};\n\nconst isSelector = (sourceAsString: string, indexAfterExpression: number) => {\n  const { line } = getLine(sourceAsString, indexAfterExpression);\n  const isSingleLineRule =\n    line.indexOf('{', indexAfterExpression) > 0 &&\n    line.indexOf('}', indexAfterExpression) > 0;\n  return isSingleLineRule || line[line.length - 2] === '{';\n};\n\nconst isProperty = (sourceAsString: string, indexAfterExpression: number) => {\n  return sourceAsString[indexAfterExpression] === ':';\n};\n\n// no ':' or '{' on the line\nconst isRuleSet = (sourceAsString: string, indexAfterExpression: number) => {\n  const { line: possibleRuleset, indexAfterExpressionInLine } = getLine(\n    sourceAsString,\n    indexAfterExpression\n  );\n  const hasCurlyBraceAfterExpression =\n    possibleRuleset.indexOf('{', indexAfterExpressionInLine) > 0;\n  const hasCommmaAfterExpression =\n    possibleRuleset.indexOf(',', indexAfterExpressionInLine) > 0;\n\n  // check if possible ruleset has ':' and outside of the func args if expression has a func\n  // i.e. avoid false postivive for `${func({ key: value })}\n  const indexOfOpenParenthesis = possibleRuleset.indexOf('(');\n  const indexOfClosedParenthesis = possibleRuleset.indexOf(')');\n  const hasFuncInExpression =\n    indexOfOpenParenthesis > 0 && indexOfClosedParenthesis > 0;\n  let hasColonOutsideOfExpression = possibleRuleset.includes(':');\n  if (hasFuncInExpression) {\n    hasColonOutsideOfExpression =\n      possibleRuleset.lastIndexOf(':', indexOfOpenParenthesis) > 0 &&\n      possibleRuleset.indexOf(':', indexOfClosedParenthesis) > 0;\n  }\n\n  return !(\n    hasColonOutsideOfExpression ||\n    hasCurlyBraceAfterExpression ||\n    hasCommmaAfterExpression\n  );\n};\n\nexport const placeholderText = 'pcss-lin';\n\nexport const createPlaceholder = (\n  i: number,\n  sourceAsString: string,\n  indexAfterExpression: number\n): string => {\n  if (isSelector(sourceAsString, indexAfterExpression)) {\n    return `.${placeholderText}${i}`;\n  }\n  if (isProperty(sourceAsString, indexAfterExpression)) {\n    return `--${placeholderText}${i}`;\n  }\n  if (isRuleSet(sourceAsString, indexAfterExpression)) {\n    return `/* ${placeholderText}:${i} */`;\n  }\n\n  // assume it's a property value or part of another string;\n  return `${placeholderText}${i}`;\n};\n"],"mappings":"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"}