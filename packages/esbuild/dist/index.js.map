{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * This file contains an esbuild loader for Linaria.\n * It uses the transform.ts function to generate class names from source code,\n * returns transformed code without template literals and attaches generated source maps\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport type { Plugin, TransformOptions, Loader } from 'esbuild';\nimport { transformSync } from 'esbuild';\n\nimport type { PluginOptions, Preprocessor } from '@linaria/babel-preset';\nimport { slugify, transform } from '@linaria/babel-preset';\n\ntype EsbuildPluginOptions = {\n  sourceMap?: boolean;\n  preprocessor?: Preprocessor;\n  esbuildOptions?: TransformOptions;\n} & Partial<PluginOptions>;\n\nconst nodeModulesRegex = /^(?:.*[\\\\/])?node_modules(?:[\\\\/].*)?$/;\n\nexport default function linaria({\n  sourceMap,\n  preprocessor,\n  esbuildOptions,\n  ...rest\n}: EsbuildPluginOptions = {}): Plugin {\n  let options = esbuildOptions;\n  return {\n    name: 'linaria',\n    setup(build) {\n      const cssLookup = new Map<string, string>();\n\n      const asyncResolve = async (\n        token: string,\n        importer: string\n      ): Promise<string> => {\n        const context = path.isAbsolute(importer)\n          ? path.dirname(importer)\n          : path.join(process.cwd(), path.dirname(importer));\n\n        const result = await build.resolve(token, {\n          resolveDir: context,\n        });\n\n        if (result.errors.length > 0) {\n          throw new Error(`Cannot resolve ${token}`);\n        }\n\n        return result.path;\n      };\n\n      build.onResolve({ filter: /\\.linaria\\.css$/ }, (args) => {\n        return {\n          namespace: 'linaria',\n          path: args.path,\n        };\n      });\n\n      build.onLoad({ filter: /.*/, namespace: 'linaria' }, (args) => {\n        return {\n          contents: cssLookup.get(args.path),\n          loader: 'css',\n          resolveDir: path.basename(args.path),\n        };\n      });\n\n      build.onLoad({ filter: /\\.(js|jsx|ts|tsx)$/ }, async (args) => {\n        const rawCode = fs.readFileSync(args.path, 'utf8');\n        const { ext, name: filename } = path.parse(args.path);\n        const loader = ext.replace(/^\\./, '') as Loader;\n\n        if (nodeModulesRegex.test(args.path)) {\n          return {\n            loader,\n            contents: rawCode,\n          };\n        }\n\n        if (!options) {\n          options = {};\n          if ('jsxFactory' in build.initialOptions) {\n            options.jsxFactory = build.initialOptions.jsxFactory;\n          }\n          if ('jsxFragment' in build.initialOptions) {\n            options.jsxFragment = build.initialOptions.jsxFragment;\n          }\n        }\n\n        const transformed = transformSync(rawCode, {\n          ...options,\n          sourcefile: args.path,\n          sourcemap: sourceMap,\n          loader,\n        });\n        let { code } = transformed;\n\n        if (sourceMap) {\n          const esbuildMap = Buffer.from(transformed.map).toString('base64');\n          code += `/*# sourceMappingURL=data:application/json;base64,${esbuildMap}*/`;\n        }\n\n        const result = await transform(\n          code,\n          {\n            filename: args.path,\n            preprocessor,\n            pluginOptions: rest,\n          },\n          asyncResolve\n        );\n\n        if (!result.cssText) {\n          return {\n            contents: code,\n            loader,\n            resolveDir: path.dirname(args.path),\n          };\n        }\n\n        let { cssText } = result;\n\n        const slug = slugify(cssText);\n        const cssFilename = `${filename}_${slug}.linaria.css`;\n\n        let contents = `import ${JSON.stringify(cssFilename)}; ${result.code}`;\n\n        if (sourceMap && result.cssSourceMapText) {\n          const map = Buffer.from(result.cssSourceMapText).toString('base64');\n          cssText += `/*# sourceMappingURL=data:application/json;base64,${map}*/`;\n          const linariaMap = Buffer.from(\n            JSON.stringify(result.sourceMap)\n          ).toString('base64');\n          contents += `/*# sourceMappingURL=data:application/json;base64,${linariaMap}*/`;\n        }\n\n        cssLookup.set(cssFilename, cssText);\n\n        return {\n          contents,\n          loader,\n          resolveDir: path.dirname(args.path),\n        };\n      });\n    },\n  };\n}\n"],"mappings":"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","names":["path","fs"]}